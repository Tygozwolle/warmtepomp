esphome:
  name: warmtepomp-kleppen
  friendly_name: warmtepomp-kleppen
preferences:
  flash_write_interval: 360min
esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "2s6SGaFjJE656En6qxDv0ieWdMhZm+woor6dP2oD8Sg="

ota:
  - platform: esphome
    password: "c3d2df4acf58f52836fbfb2aeb784869"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Warmtepomp-Kleppen"
    password: "0guWFtixWXCO"

captive_portal:
i2c:
  sda: GPIO21
  scl: GPIO22
  scan: true
  id: bus_a

pcf8574:
  - id: "pcf8575_hub"
    address: 0x27
    pcf8575: true
switch:
  - platform: gpio
    name: "Circulatie Pomp"
    pin:
      pcf8574: pcf8575_hub
      # Use pin number 0 inschakel relay
      number: 0
      # One of INPUT or OUTPUT
      mode:
        output: true
      inverted: true
  - platform: gpio
    name: "PCF8575 Pin #1"
    pin:
      pcf8574: pcf8575_hub
      # Use pin number 0 inschakel relay
      number: 1
      # One of INPUT or OUTPUT
      mode:
        output: true
      inverted: true
  - platform: gpio
    name: "PCF8575 Pin #2"
    pin:
      pcf8574: pcf8575_hub
      # Use pin number 0
      number: 2
      # One of INPUT or OUTPUT
      mode:
        output: true
      inverted: true
  - platform: gpio
    name: "PCF8575 Pin #3"
    pin:
      pcf8574: pcf8575_hub
      # Use pin number 0
      number: 3
      # One of INPUT or OUTPUT
      mode:
        output: true
      inverted: true
  - platform: gpio
    name: "PCF8575 Pin #4"
    pin:
      pcf8574: pcf8575_hub
      # Use pin number 0
      number: 4
      # One of INPUT or OUTPUT
      mode:
        output: true
      inverted: true
  - platform: gpio
    name: "PCF8575 Pin #5"
    pin:
      pcf8574: pcf8575_hub
      # Use pin number 0
      number: 5
      # One of INPUT or OUTPUT
      mode:
        output: true
      inverted: true
  - platform: gpio
    name: "PCF8575 Pin #6"
    id: aan_uit
    pin:
      pcf8574: pcf8575_hub
      # Use pin number 0 interlock aan/uit relais
      number: 6
      # One of INPUT or OUTPUT
      mode:
        output: true
      inverted: true
  - platform: gpio
    name: "PCF8575 Pin #7"
    id: open_closed
    pin:
      pcf8574: pcf8575_hub
      # Use pin number 0  interlock open/closed relais
      number: 7
      # One of INPUT or OUTPUT
      mode:
        output: true
      inverted: true
  - platform: gpio
    name: "woonkamer"
    id: woonkamer
    pin:
      pcf8574: pcf8575_hub
      # Use pin number 0
      number: 8
      # One of INPUT or OUTPUT cloded
      mode:
        output: true
      inverted: false
  - platform: gpio
    name: "PCF8575 Pin #9"
    pin:
      pcf8574: pcf8575_hub
      # Use pin number 0
      number: 9
      # One of INPUT or OUTPUT cloded
      mode:
        output: true
      inverted: false
  - platform: gpio
    name: "PCF8575 Pin #10"
    pin:
      pcf8574: pcf8575_hub
      # Use pin number 0
      number: 10
      # One of INPUT or OUTPUT cloded
      mode:
        output: true
      inverted: false
  - platform: gpio
    name: "Badkamer"
    pin:
      pcf8574: pcf8575_hub
      # Use pin number 0
      number: 11
      # One of INPUT or OUTPUT
      mode:
        output: true
      inverted: true
  - platform: gpio
    name: "PCF8575 Pin #12"
    pin:
      pcf8574: pcf8575_hub
      # Use pin number 0
      number: 12
      # One of INPUT or OUTPUT
      mode:
        output: true
      inverted: true
  - platform: gpio
    name: "PCF8575 Pin #13"
    pin:
      pcf8574: pcf8575_hub
      # Use pin number 0
      number: 13
      # One of INPUT or OUTPUT
      mode:
        output: true
      inverted: true
  - platform: gpio
    name: "PCF8575 Pin #14"
    pin:
      pcf8574: pcf8575_hub
      # Use pin number 0
      number: 14
      # One of INPUT or OUTPUT
      mode:
        output: true
      inverted: true
  - platform: gpio
    name: "PCF8575 Pin #15"
    pin:
      pcf8574: pcf8575_hub
      # Use pin number 0
      number: 15
      # One of INPUT or OUTPUT
      mode:
        output: true
      inverted: true
  # open closed interlock
  - platform: template
    name: "open valve"
    id: open_valve
    lambda: |-
      if (id(aan_uit).state && id(open_closed).state) {
        return true;
      } else {
        return false;
      }
    turn_on_action:
      - if:
          condition:
            switch.is_off: closed_valve
          then:
            #   - switch.turn_off: closed_valve
            #  - delay: 1s
            - switch.turn_on: aan_uit
            - switch.turn_on: open_closed
    #    - switch.turn_off: closed_valve
    #     - delay: 1s
    #  - switch.turn_on: aan_uit
    #- switch.turn_on: open_closed
    turn_off_action:
      - if:
          condition:
            switch.is_off: closed_valve
          then:
            - switch.turn_off: aan_uit
            - switch.turn_off: open_closed

    # - switch.turn_off: aan_uit
  - platform: template
    name: "closed valve"
    id: closed_valve
    lambda: |-
      if (id(aan_uit).state && !id(open_closed).state) {
        return true;
      } else {
        return false;
      }
    turn_on_action:
      - if:
          condition:
            switch.is_off: open_valve
          then:
            - switch.turn_off: open_closed
            - switch.turn_on: aan_uit
      #    - switch.turn_on: open_closed

    #  - switch.turn_off: open_valve
    # - delay: 1s
    #     - switch.turn_on: aan_uit
    #    - switch.turn_off: open_closed
    turn_off_action:
      - if:
          condition:
            switch.is_off: open_valve
          then:
            - switch.turn_off: aan_uit
            - switch.turn_off: open_closed
    #    else:
  #      - switch.turn_off: aan_uit
  #       - switch.turn_off: open_closed
  #  - switch.turn_off: aan_ui

globals:
  - id: heating_valve
    type: bool
    restore_value: no
    initial_value: "false"
  - id: cooling_valve
    type: bool
    restore_value: no
    initial_value: "false"
  - id: valve_position_var
    type: float
    restore_value: no
    initial_value: "0.5"
  - id: seconds
    type: int
    restore_value: no
    initial_value: "0"
cover:
  - platform: time_based
    name: "valve position"
    id: valve_position
    manual_control: true
    open_action:
      - switch.turn_on: open_valve
    open_duration: 2min

    close_action:
      - switch.turn_on: closed_valve
    close_duration: 2min

    stop_action:
      - switch.turn_off: open_valve
      - switch.turn_off: closed_valve
button:
  - platform: template
    name: "recalibrate valve"
    on_press:
      - cover.close: valve_position
      #  - delay: 30s
      # - switch.turn_on: closed_valve
      #- delay: 2min
      # - switch.turn_off: closed_valve
  - platform: restart
    name: "warmtepomp esp Restart"
one_wire:
  - platform: gpio
    pin: GPIO4
sensor:
  - platform: internal_temperature
    name: "Internal Temperature"
    update_interval: 15s
  - platform: dallas_temp
    address: 0x3e9f6e5309646128
    name: verwarming leiding naar vloerverwarming
    id: leiding_temperatuur
    update_interval: never
    #   update_interval: 5s
    resolution: 10
    filters:
      - filter_out: 85
      - filter_out: nan
  - platform: dallas_temp
    address: 0x4110675309646128
    name: temperatuur kast
    id: temperatuur_kast
    update_interval: never
    #  update_interval: 30s
    resolution: 10
    filters:
      - filter_out: 85
      - filter_out: nan
  - platform: dallas_temp
    address: 0x7fd0785309646128
    name: temperatuur 1
    id: temperatuur_1
    update_interval: never
    #  update_interval: 30s
    resolution: 10
    filters:
      - filter_out: 85
      - filter_out: nan
  - platform: dallas_temp
    address: 0xe7dc7c5309646128
    name: temperatuur 2
    id: temperatuur_2
    update_interval: never
    #update_interval: 30s
    resolution: 10
    filters:
      - filter_out: 85
      - filter_out: nan
  - platform: dallas_temp
    address: 0x07b37d5309646128
    name: temperatuur 3
    id: temperatuur_3
    update_interval: never
    resolution: 10
    # update_interval: 30s
    filters:
      - filter_out: 85
      - filter_out: nan
interval:
  - interval: 5s
    then:
      - lambda: |-
          id(seconds) = id(seconds) + 1;
      # - globals.set:
      #     id: seconds
      #     value: !lambda 'return id(seconds) + 1;'
      #     #value: |-
      #      # return id(seconds) + 1;
      - component.update: leiding_temperatuur
      - if:
          condition:
            lambda: "return ((id(seconds) % 6) == 0) ;"
          then:
            - delay: 750ms
            - component.update: temperatuur_kast
            - delay: 750ms
            - component.update: temperatuur_1
            - delay: 750ms
            - component.update: temperatuur_2
            - delay: 750ms
            - component.update: temperatuur_3
            - delay: 750ms
      # - delay: 2s
      # - component.update: sensor2
      # - delay: 2s
# climate:
#  -  platform: thermostat
#     name: "Thermostat Climate Controller"
#     sensor: leiding_temperatuur
#     on_boot_restore_from: default_preset
#     min_idle_time: 1s
#     min_cooling_off_time: 1s
#     min_cooling_run_time: 1s
#     min_heating_off_time: 1s
#     min_heating_run_time: 1s
#     cool_action:
#       - lambda: |-
#           id(heating_valve)=(false);
#           id(cooling_valve)=(true);
#       # - switch.turn_off: open_valve
#       # - switch.turn_on: closed_valve
#     heat_action:
#       - lambda: |-
#           id(heating_valve)=(true);
#           id(cooling_valve)=(false);
#       # - switch.turn_off: closed_valve
#       # - switch.turn_on: open_valve
#     idle_action:
#       - lambda: |-
#           id(heating_valve)=(false);
#           id(cooling_valve)=(false);
#       # - switch.turn_off: open_valve
#       # - switch.turn_off: closed_valve
#     default_preset: Home
#     preset:
#       - name: Home
#         default_target_temperature_low: 30 °C
#         default_target_temperature_high: 32 °C
#     visual:
#       min_temperature: 20
#       max_temperature: 40
#       temperature_step: 1

# interval:
#   - interval: 10s
#     then:
#       if:
#         condition:
#           lambda: 'return ( id(heating_valve) || id(cooling_valve)) ;'
#         then:
#           lambda: |-
#             if(id(heating_valve)){
#             id(valve_position_var) = id(valve_position).position + 0.01;
#             if (id(valve_position_var) > 1.0) {
#               id(valve_position_var) = 1.0;
#             }

#             //  id(valve_position).set_position(id(valve_position_var));}
#             }
#             else{
#               id(valve_position_var) = id(valve_position).position - 0.01;
#               if (id(valve_position_var) < 0.0) {
#                 id(valve_position_var) = 0.0;
#               }
#              // id(valve_position).set_position(id(valve_position_var));
#             }
#             if (id(valve_position_var) > 0.01 && id(valve_position_var) < 0.99) {
#             auto call = id(valve_position).make_call();
#             logger.log: "Setting valve position to %f", id(valve_position_var)
#             // set attributes
#             call.set_position(id(valve_position_var));
#             call.perform();}
#         else:
#           - cover.close: valve_position
